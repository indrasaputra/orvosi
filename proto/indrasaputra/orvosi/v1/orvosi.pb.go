// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.2
// source: proto/indrasaputra/orvosi/v1/orvosi.proto

package orvosiv1

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MedicalRecordErrorCode int32

const (
	// Default enum code according to
	// https://medium.com/@akhaku/protobuf-definition-best-practices-87f281576f31.
	MedicalRecordErrorCode_UNSPECIFIED MedicalRecordErrorCode = 0
	// Unexpected behavior occured in system.
	MedicalRecordErrorCode_INTERNAL MedicalRecordErrorCode = 1
	// MedicalRecord instance is empty or nil.
	MedicalRecordErrorCode_EMPTY_MEDICAL_RECORD MedicalRecordErrorCode = 2
)

// Enum value maps for MedicalRecordErrorCode.
var (
	MedicalRecordErrorCode_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "INTERNAL",
		2: "EMPTY_MEDICAL_RECORD",
	}
	MedicalRecordErrorCode_value = map[string]int32{
		"UNSPECIFIED":          0,
		"INTERNAL":             1,
		"EMPTY_MEDICAL_RECORD": 2,
	}
)

func (x MedicalRecordErrorCode) Enum() *MedicalRecordErrorCode {
	p := new(MedicalRecordErrorCode)
	*p = x
	return p
}

func (x MedicalRecordErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicalRecordErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_indrasaputra_orvosi_v1_orvosi_proto_enumTypes[0].Descriptor()
}

func (MedicalRecordErrorCode) Type() protoreflect.EnumType {
	return &file_proto_indrasaputra_orvosi_v1_orvosi_proto_enumTypes[0]
}

func (x MedicalRecordErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicalRecordErrorCode.Descriptor instead.
func (MedicalRecordErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_indrasaputra_orvosi_v1_orvosi_proto_rawDescGZIP(), []int{0}
}

type CreateMedicalRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MedicalRecord *MedicalRecord `protobuf:"bytes,1,opt,name=medical_record,json=medicalRecord,proto3" json:"medical_record,omitempty"`
}

func (x *CreateMedicalRecordRequest) Reset() {
	*x = CreateMedicalRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_orvosi_v1_orvosi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMedicalRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMedicalRecordRequest) ProtoMessage() {}

func (x *CreateMedicalRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_orvosi_v1_orvosi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMedicalRecordRequest.ProtoReflect.Descriptor instead.
func (*CreateMedicalRecordRequest) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_orvosi_v1_orvosi_proto_rawDescGZIP(), []int{0}
}

func (x *CreateMedicalRecordRequest) GetMedicalRecord() *MedicalRecord {
	if x != nil {
		return x.MedicalRecord
	}
	return nil
}

type CreateMedicalRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateMedicalRecordResponse) Reset() {
	*x = CreateMedicalRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_orvosi_v1_orvosi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMedicalRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMedicalRecordResponse) ProtoMessage() {}

func (x *CreateMedicalRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_orvosi_v1_orvosi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMedicalRecordResponse.ProtoReflect.Descriptor instead.
func (*CreateMedicalRecordResponse) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_orvosi_v1_orvosi_proto_rawDescGZIP(), []int{1}
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_orvosi_v1_orvosi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_orvosi_v1_orvosi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_orvosi_v1_orvosi_proto_rawDescGZIP(), []int{2}
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MedicalRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symptom   string                 `protobuf:"bytes,1,opt,name=symptom,proto3" json:"symptom,omitempty"`
	Diagnosis string                 `protobuf:"bytes,2,opt,name=diagnosis,proto3" json:"diagnosis,omitempty"`
	Therapy   string                 `protobuf:"bytes,3,opt,name=therapy,proto3" json:"therapy,omitempty"`
	Result    string                 `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *MedicalRecord) Reset() {
	*x = MedicalRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_orvosi_v1_orvosi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicalRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicalRecord) ProtoMessage() {}

func (x *MedicalRecord) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_orvosi_v1_orvosi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicalRecord.ProtoReflect.Descriptor instead.
func (*MedicalRecord) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_orvosi_v1_orvosi_proto_rawDescGZIP(), []int{3}
}

func (x *MedicalRecord) GetSymptom() string {
	if x != nil {
		return x.Symptom
	}
	return ""
}

func (x *MedicalRecord) GetDiagnosis() string {
	if x != nil {
		return x.Diagnosis
	}
	return ""
}

func (x *MedicalRecord) GetTherapy() string {
	if x != nil {
		return x.Therapy
	}
	return ""
}

func (x *MedicalRecord) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *MedicalRecord) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MedicalRecord) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type MedicalRecordError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorCode MedicalRecordErrorCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=proto.indrasaputra.orvosi.v1.MedicalRecordErrorCode" json:"error_code,omitempty"`
}

func (x *MedicalRecordError) Reset() {
	*x = MedicalRecordError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_indrasaputra_orvosi_v1_orvosi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicalRecordError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicalRecordError) ProtoMessage() {}

func (x *MedicalRecordError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_indrasaputra_orvosi_v1_orvosi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicalRecordError.ProtoReflect.Descriptor instead.
func (*MedicalRecordError) Descriptor() ([]byte, []int) {
	return file_proto_indrasaputra_orvosi_v1_orvosi_proto_rawDescGZIP(), []int{4}
}

func (x *MedicalRecordError) GetErrorCode() MedicalRecordErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return MedicalRecordErrorCode_UNSPECIFIED
}

var File_proto_indrasaputra_orvosi_v1_orvosi_proto protoreflect.FileDescriptor

var file_proto_indrasaputra_orvosi_v1_orvosi_proto_rawDesc = []byte{
	0x0a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70,
	0x75, 0x74, 0x72, 0x61, 0x2f, 0x6f, 0x72, 0x76, 0x6f, 0x73, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f,
	0x72, 0x76, 0x6f, 0x73, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2e,
	0x6f, 0x72, 0x76, 0x6f, 0x73, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x70, 0x0a, 0x1a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70,
	0x75, 0x74, 0x72, 0x61, 0x2e, 0x6f, 0x72, 0x76, 0x6f, 0x73, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0d, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x34, 0x92, 0x41, 0x2d, 0x32, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x4a, 0x15, 0x22, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x40, 0x6f, 0x72,
	0x76, 0x6f, 0x73, 0x69, 0x2e, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0xa2, 0x02, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x38, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92,
	0x41, 0x1d, 0x32, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x4a,
	0x0e, 0x22, 0x42, 0x6f, 0x61, 0x7a, 0x20, 0x53, 0x6f, 0x6c, 0x6f, 0x73, 0x73, 0x61, 0x22, 0xe2,
	0x41, 0x01, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xef, 0x03, 0x0a, 0x0d, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x5f, 0x0a, 0x07, 0x73,
	0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45, 0x92, 0x41,
	0x42, 0x32, 0x14, 0x41, 0x20, 0x73, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x20, 0x6f, 0x66, 0x20,
	0x69, 0x6c, 0x6c, 0x6e, 0x65, 0x73, 0x73, 0x4a, 0x1a, 0x22, 0x6d, 0x61, 0x61, 0x67, 0x2c, 0x20,
	0x73, 0x61, 0x6b, 0x69, 0x74, 0x20, 0x70, 0x65, 0x72, 0x75, 0x74, 0x2c, 0x20, 0x64, 0x69, 0x61,
	0x72, 0x65, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01, 0x01, 0xd2, 0x01, 0x07, 0x73, 0x79, 0x6d, 0x70,
	0x74, 0x6f, 0x6d, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x70, 0x74, 0x6f, 0x6d, 0x12, 0x5d, 0x0a, 0x09,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x3f, 0x92, 0x41, 0x3c, 0x32, 0x1b, 0x41, 0x20, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x62, 0x79, 0x20, 0x64, 0x6f, 0x63, 0x74, 0x6f,
	0x72, 0x4a, 0x0b, 0x22, 0x64, 0x69, 0x73, 0x70, 0x65, 0x70, 0x73, 0x69, 0x61, 0x22, 0x78, 0xc8,
	0x01, 0x80, 0x01, 0x01, 0xd2, 0x01, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x52, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x59, 0x0a, 0x07, 0x74,
	0x68, 0x65, 0x72, 0x61, 0x70, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0x92, 0x41,
	0x3c, 0x32, 0x17, 0x54, 0x68, 0x65, 0x72, 0x61, 0x70, 0x79, 0x20, 0x67, 0x69, 0x76, 0x65, 0x6e,
	0x20, 0x62, 0x79, 0x20, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x4a, 0x11, 0x22, 0x70, 0x65, 0x70,
	0x7a, 0x6f, 0x6c, 0x20, 0x32, 0x30, 0x6d, 0x67, 0x20, 0x33, 0x78, 0x31, 0x22, 0x78, 0xc8, 0x01,
	0x80, 0x01, 0x01, 0xd2, 0x01, 0x07, 0x74, 0x68, 0x65, 0x72, 0x61, 0x70, 0x79, 0x52, 0x07, 0x74,
	0x68, 0x65, 0x72, 0x61, 0x70, 0x79, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0x92, 0x41, 0x26, 0x32, 0x14, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x72, 0x61, 0x70,
	0x79, 0x4a, 0x08, 0x22, 0x73, 0x65, 0x6d, 0x62, 0x75, 0x68, 0x22, 0x78, 0xc8, 0x01, 0x80, 0x01,
	0x01, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x69, 0x0a, 0x12, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x53, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e,
	0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2e, 0x6f, 0x72, 0x76, 0x6f, 0x73,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2a, 0x51, 0x0a, 0x16, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x4c,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x10, 0x02, 0x32, 0x8b, 0x02, 0x0a, 0x14, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xb7, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x38, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2e,
	0x6f, 0x72, 0x76, 0x6f, 0x73, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x69, 0x6e, 0x64,
	0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2e, 0x6f, 0x72, 0x76, 0x6f, 0x73, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x6c, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x3a, 0x0e, 0x6d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x39, 0x92, 0x41,
	0x36, 0x12, 0x34, 0x54, 0x68, 0x69, 0x73, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x20,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x73, 0x20, 0x41, 0x50, 0x49, 0x20, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c, 0x20,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x42, 0x90, 0x02, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75,
	0x74, 0x72, 0x61, 0x2f, 0x6f, 0x72, 0x76, 0x6f, 0x73, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2f, 0x6f, 0x72,
	0x76, 0x6f, 0x73, 0x69, 0x2f, 0x76, 0x31, 0x3b, 0x6f, 0x72, 0x76, 0x6f, 0x73, 0x69, 0x76, 0x31,
	0x92, 0x41, 0xc6, 0x01, 0x12, 0x9f, 0x01, 0x0a, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x6c,
	0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x41, 0x50, 0x49, 0x22, 0x30, 0x0a, 0x0d, 0x49,
	0x6e, 0x64, 0x72, 0x61, 0x20, 0x53, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x12, 0x1f, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73, 0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2a, 0x50, 0x0a,
	0x14, 0x42, 0x53, 0x44, 0x20, 0x33, 0x2d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x20, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x73,
	0x61, 0x70, 0x75, 0x74, 0x72, 0x61, 0x2f, 0x6f, 0x72, 0x76, 0x6f, 0x73, 0x69, 0x2f, 0x62, 0x6c,
	0x6f, 0x62, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x32,
	0x05, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_indrasaputra_orvosi_v1_orvosi_proto_rawDescOnce sync.Once
	file_proto_indrasaputra_orvosi_v1_orvosi_proto_rawDescData = file_proto_indrasaputra_orvosi_v1_orvosi_proto_rawDesc
)

func file_proto_indrasaputra_orvosi_v1_orvosi_proto_rawDescGZIP() []byte {
	file_proto_indrasaputra_orvosi_v1_orvosi_proto_rawDescOnce.Do(func() {
		file_proto_indrasaputra_orvosi_v1_orvosi_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_indrasaputra_orvosi_v1_orvosi_proto_rawDescData)
	})
	return file_proto_indrasaputra_orvosi_v1_orvosi_proto_rawDescData
}

var file_proto_indrasaputra_orvosi_v1_orvosi_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_indrasaputra_orvosi_v1_orvosi_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_indrasaputra_orvosi_v1_orvosi_proto_goTypes = []interface{}{
	(MedicalRecordErrorCode)(0),         // 0: proto.indrasaputra.orvosi.v1.MedicalRecordErrorCode
	(*CreateMedicalRecordRequest)(nil),  // 1: proto.indrasaputra.orvosi.v1.CreateMedicalRecordRequest
	(*CreateMedicalRecordResponse)(nil), // 2: proto.indrasaputra.orvosi.v1.CreateMedicalRecordResponse
	(*User)(nil),                        // 3: proto.indrasaputra.orvosi.v1.User
	(*MedicalRecord)(nil),               // 4: proto.indrasaputra.orvosi.v1.MedicalRecord
	(*MedicalRecordError)(nil),          // 5: proto.indrasaputra.orvosi.v1.MedicalRecordError
	(*timestamppb.Timestamp)(nil),       // 6: google.protobuf.Timestamp
}
var file_proto_indrasaputra_orvosi_v1_orvosi_proto_depIdxs = []int32{
	4, // 0: proto.indrasaputra.orvosi.v1.CreateMedicalRecordRequest.medical_record:type_name -> proto.indrasaputra.orvosi.v1.MedicalRecord
	6, // 1: proto.indrasaputra.orvosi.v1.MedicalRecord.created_at:type_name -> google.protobuf.Timestamp
	6, // 2: proto.indrasaputra.orvosi.v1.MedicalRecord.updated_at:type_name -> google.protobuf.Timestamp
	0, // 3: proto.indrasaputra.orvosi.v1.MedicalRecordError.error_code:type_name -> proto.indrasaputra.orvosi.v1.MedicalRecordErrorCode
	1, // 4: proto.indrasaputra.orvosi.v1.MedicalRecordService.CreateMedicalRecord:input_type -> proto.indrasaputra.orvosi.v1.CreateMedicalRecordRequest
	2, // 5: proto.indrasaputra.orvosi.v1.MedicalRecordService.CreateMedicalRecord:output_type -> proto.indrasaputra.orvosi.v1.CreateMedicalRecordResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_proto_indrasaputra_orvosi_v1_orvosi_proto_init() }
func file_proto_indrasaputra_orvosi_v1_orvosi_proto_init() {
	if File_proto_indrasaputra_orvosi_v1_orvosi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_indrasaputra_orvosi_v1_orvosi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMedicalRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_orvosi_v1_orvosi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMedicalRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_orvosi_v1_orvosi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_orvosi_v1_orvosi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicalRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_indrasaputra_orvosi_v1_orvosi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicalRecordError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_indrasaputra_orvosi_v1_orvosi_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_indrasaputra_orvosi_v1_orvosi_proto_goTypes,
		DependencyIndexes: file_proto_indrasaputra_orvosi_v1_orvosi_proto_depIdxs,
		EnumInfos:         file_proto_indrasaputra_orvosi_v1_orvosi_proto_enumTypes,
		MessageInfos:      file_proto_indrasaputra_orvosi_v1_orvosi_proto_msgTypes,
	}.Build()
	File_proto_indrasaputra_orvosi_v1_orvosi_proto = out.File
	file_proto_indrasaputra_orvosi_v1_orvosi_proto_rawDesc = nil
	file_proto_indrasaputra_orvosi_v1_orvosi_proto_goTypes = nil
	file_proto_indrasaputra_orvosi_v1_orvosi_proto_depIdxs = nil
}
