// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package orvosiv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MedicalRecordServiceClient is the client API for MedicalRecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MedicalRecordServiceClient interface {
	// Create a new medical record.
	//
	// This endpoint creates a new medical record.
	CreateMedicalRecord(ctx context.Context, in *CreateMedicalRecordRequest, opts ...grpc.CallOption) (*CreateMedicalRecordResponse, error)
}

type medicalRecordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMedicalRecordServiceClient(cc grpc.ClientConnInterface) MedicalRecordServiceClient {
	return &medicalRecordServiceClient{cc}
}

func (c *medicalRecordServiceClient) CreateMedicalRecord(ctx context.Context, in *CreateMedicalRecordRequest, opts ...grpc.CallOption) (*CreateMedicalRecordResponse, error) {
	out := new(CreateMedicalRecordResponse)
	err := c.cc.Invoke(ctx, "/proto.indrasaputra.orvosi.v1.MedicalRecordService/CreateMedicalRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MedicalRecordServiceServer is the server API for MedicalRecordService service.
// All implementations must embed UnimplementedMedicalRecordServiceServer
// for forward compatibility
type MedicalRecordServiceServer interface {
	// Create a new medical record.
	//
	// This endpoint creates a new medical record.
	CreateMedicalRecord(context.Context, *CreateMedicalRecordRequest) (*CreateMedicalRecordResponse, error)
	mustEmbedUnimplementedMedicalRecordServiceServer()
}

// UnimplementedMedicalRecordServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMedicalRecordServiceServer struct {
}

func (UnimplementedMedicalRecordServiceServer) CreateMedicalRecord(context.Context, *CreateMedicalRecordRequest) (*CreateMedicalRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMedicalRecord not implemented")
}
func (UnimplementedMedicalRecordServiceServer) mustEmbedUnimplementedMedicalRecordServiceServer() {}

// UnsafeMedicalRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MedicalRecordServiceServer will
// result in compilation errors.
type UnsafeMedicalRecordServiceServer interface {
	mustEmbedUnimplementedMedicalRecordServiceServer()
}

func RegisterMedicalRecordServiceServer(s grpc.ServiceRegistrar, srv MedicalRecordServiceServer) {
	s.RegisterService(&MedicalRecordService_ServiceDesc, srv)
}

func _MedicalRecordService_CreateMedicalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMedicalRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordServiceServer).CreateMedicalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.indrasaputra.orvosi.v1.MedicalRecordService/CreateMedicalRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordServiceServer).CreateMedicalRecord(ctx, req.(*CreateMedicalRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MedicalRecordService_ServiceDesc is the grpc.ServiceDesc for MedicalRecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MedicalRecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.indrasaputra.orvosi.v1.MedicalRecordService",
	HandlerType: (*MedicalRecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMedicalRecord",
			Handler:    _MedicalRecordService_CreateMedicalRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/indrasaputra/orvosi/v1/orvosi.proto",
}
